#!/bin/bash


## BUILDER DIRECTORY
BASEDIR="`dirname "$0"`"
# echo -e "BASEDIR: $BASEDIR"


## COLORS
GREEN='\033[1;32m' # Green
BLUE='\033[1;34m' # Blue
RED='\033[1;31m' # Red
RESET='\033[0m' # No Color
# echo -e "${RED}Green${RESET} - ${BLUE}Blue${RESET} - ${RED}Red${RESET}"


## FIND CURRENT OS
OS="Unknown"
ENVIRONMENT=staging
if [[ "$OSTYPE" == "linux-gnu" ]];then
	OS="Linux"
	ENVIRONMENT=remote
elif [[ "$OSTYPE" == "darwin"* ]];then
	OS="MacOS"
	ENVIRONMENT=local
elif [[ "$OSTYPE" == "cygwin" ]];then
	# POSIX compatibility layer and Linux environment emulation for Windows
	OS="cygwin"
	ENVIRONMENT=remote
elif [[ "$OSTYPE" == "msys" ]];then
	# Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
	OS="msys"
	ENVIRONMENT=local
elif [[ "$OSTYPE" == "win32" ]];then
	OS="Win32"
	ENVIRONMENT=local
elif [[ "$OSTYPE" == "freebsd"* ]];then
	OS="FreeBSD"
	ENVIRONMENT=remote
fi
#echo "Operating System: ${OS}"


## ENVIRONMENT VARIABLES
ENV_FILE="$BASEDIR/.env"

# If environment file doesn't exist, try using sample file
if [[ ! -f $ENV_FILE ]];then

	# If sample environment file also doesn't exist, exit
	if [[ -f "${ENV_FILE}.${ENVIRONMENT}" ]];then

		# Copy from the sample
		cp "${ENV_FILE}.${ENVIRONMENT}" "$ENV_FILE"

	fi

fi

# Include it
source $ENV_FILE


# CHECK DOCKER WHETHER OR NOT RUNNING
rep=$(docker ps -q &>/dev/null)
status=$?
if [[ "$status" != "0" ]];then

	echo -e "${BLUE}Docker engine is not running. Please open the docker and wait until it starts.${RESET}"
	exit 1

fi




## CLONNING THE SERVICES
# Landing Page Repo
if [[ ! -d landing ]]; then

	echo "Landing clonning..."
	git clone https://github.com/Revisionary/revisionary-landing.git landing

fi

# Dashboard Page Repo
if [[ ! -d dashboard ]]; then

	echo "Dashboard clonning..."
	git clone https://github.com/Revisionary/revisionary-dashboard.git dashboard

fi

# Backend Repo
if [[ ! -d backend ]]; then

	echo "Backend clonning..."
	git clone https://github.com/Revisionary/revisionary-backend-nginx.git backend

fi

# Backend Sources Repo
if [[ ! -d backend/src ]]; then

	echo "Backend sources clonning..."
	git clone https://github.com/Revisionary/revisionary-backend-src.git backend/src

fi

# Database Repo
if [[ ! -d database ]]; then

	echo "Database clonning..."
	git clone https://github.com/Revisionary/revisionary-database.git database

fi

# Chrome Repo
if [[ ! -d chrome ]]; then

	echo "Chrome clonning..."
	git clone https://github.com/Revisionary/revisionary-chrome.git chrome

fi




## FUNCTIONS
# Docker Compose bundle
function docker_compose {
	COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_BUILDKIT=0 docker-compose --env-file "${ENV_FILE}" --file "docker-compose-${ENV_NAME}.yml" "$@"
}


# SPECIFIC SERVICE !!! $SERVICE to $SERVICE
SERVICE=all
if [[ ! -z $2 ]];then
	SERVICE=$2
fi


# ACTIONS
ACTION=$1
echo -e "Started $ENV_NAME action: ${BLUE}$ACTION${RESET} ($SERVICE)"
if [[ $ACTION == deploy ]]; then


	# Create Certificates
	bash "$BASEDIR/action" create-certificates $SERVICE


	# Build
	bash "$BASEDIR/action" rebuild $SERVICE


	# Start
	bash "$BASEDIR/action" restart $SERVICE



elif [[ $ACTION == pull ]]; then


	echo "Main Project:"
	git pull --no-commit --no-rebase

	echo "Landing:"
	( cd landing && git pull --no-commit --no-rebase )

	echo "Dashboard:"
	( cd dashboard && git pull --no-commit --no-rebase )

	echo "Backend:"
	( cd backend && git pull --no-commit --no-rebase )

	echo "Backend Source:"
	( cd backend/src && git pull --no-commit --no-rebase )

	echo "Database:"
	( cd database && git pull --no-commit --no-rebase )

	echo "Chrome:"
	( cd chrome && git pull --no-commit --no-rebase )


elif [[ $ACTION == rebuild ]]; then


	CONTAINER=""
	if [[ $SERVICE != "all" ]];then
		CONTAINER=$SERVICE
	fi


	# Rebuild
	if ! docker_compose build --force-rm $CONTAINER;then

		echo -e "${RED}Error occured while running the containers.${RESET}"
		exit 1

	fi


	# Permission fix
	bash "$BASEDIR/action" permission-fix $SERVICE


elif [[ $ACTION == restart ]]; then


	CONTAINERS=""
	if [[ $SERVICE != "all" ]];then
		CONTAINERS=$SERVICE
	fi


	# Restart
	if ! docker_compose up -d --force-recreate --remove-orphans --no-deps --renew-anon-volumes $CONTAINERS;then

		echo -e "${RED}Error occured while running the containers.${RESET}"
		exit 1

	fi


elif [[ $ACTION == uninstall ]]; then


	read -ep "This action will stop the server. Are you sure you want to continue? (yes | no): " confirmation
	[[ $confirmation != "yes" ]] && exit || sleep 0


	# Uninstall
	if ! docker_compose down --volumes --remove-orphans;then

		echo -e "${RED}Error occured while uninstalling.${RESET}"

	fi


elif [[ $ACTION == update-images ]]; then


	read -ep "This action will stop the server for a moment. Are you sure you want to continue? (yes | no): " confirmation
	[[ $confirmation != "yes" ]] && exit || sleep 0


	echo "Updating the server..."
	docker_compose stop
	docker_compose rm -f
	docker_compose pull
	docker_compose up -d --build --force-recreate
	echo "Server up-to-date."


	# Permission fix
	bash "$BASEDIR/action" permission-fix $SERVICE


elif [[ $ACTION == reset-repos ]]; then


	if [[ $SERVICE == "landing" ]] || [[ $SERVICE == "all" ]];then

		printf "Resetting the landing/ folder ..."
		( cd "$BASEDIR/landing/" && git reset --hard --quiet && git clean -dfx --quiet && git pull --no-commit --no-rebase --quiet )
		echo -e " ${GREEN}done${RESET}"

	fi


	if [[ $SERVICE == "dashboard" ]] || [[ $SERVICE == "all" ]];then

		printf "Resetting the dashboard/ folder ..."
		( cd "$BASEDIR/dashboard/" && git reset --hard --quiet && git clean -dfx --quiet && git pull --no-commit --no-rebase --quiet )
		echo -e " ${GREEN}done${RESET}"

	fi


	if [[ $SERVICE == "backend" ]] || [[ $SERVICE == "all" ]];then

		printf "Resetting the backend/ folder ..."
		( cd "$BASEDIR/backend/" && git reset --hard --quiet && git clean -dfx --quiet && git pull --no-commit --no-rebase --quiet )
		echo -e " ${GREEN}done${RESET}"

	fi


	if [[ $SERVICE == "backend/src" ]] || [[ $SERVICE == "all" ]];then

		printf "Resetting the backend/src/ folder ..."
		( cd "$BASEDIR/backend/src/" && git reset --hard --quiet && git clean -dfx --quiet && git pull --no-commit --no-rebase --quiet )
		echo -e " ${GREEN}done${RESET}"

	fi


	if [[ $SERVICE == "database" ]] || [[ $SERVICE == "all" ]];then

		printf "Resetting the database/ folder ..."
		( cd "$BASEDIR/database/" && git reset --hard --quiet && git clean -dfx --quiet && git pull --no-commit --no-rebase --quiet )
		echo -e " ${GREEN}done${RESET}"

	fi


	if [[ $SERVICE == "chrome" ]] || [[ $SERVICE == "all" ]];then

		printf "Resetting the chrome/ folder ..."
		( cd "$BASEDIR/chrome/" && git reset --hard --quiet && git clean -dfx --quiet && git pull --no-commit --no-rebase --quiet )
		echo -e " ${GREEN}done${RESET}"

	fi


elif [[ $ACTION == reset-docker ]]; then


	# Cleanup the other volumes and images
	if ! docker system prune --all --volumes -f;then # All with Build Cache

		echo -e "${RED}Error occured resetting docker.${RESET}"

	fi

	# # Or one by one:
	# docker container prune -f
	# docker network prune -f
	# docker volume prune -f
	# docker image prune --all -f


elif [[ $ACTION == reset-all ]]; then


	bash "$BASEDIR/action" uninstall
	bash "$BASEDIR/action" reset-docker
	bash "$BASEDIR/action" reset-repos


elif [[ $ACTION == permission-fix ]]; then


	echo "Updating file permissions in server..."
	docker_compose exec backend chown -R www-data:www-data /backend
	docker_compose exec backend find /backend -type f -exec chmod 644 {} \;
	docker_compose exec backend find /backend -type d -exec chmod 755 {} \;
	echo "File permissions updated in server"


elif [[ $ACTION == create-certificates ]]; then


	# RevisionaryApp.com Certificates
	if [[ ! -f "$BASEDIR/proxy/certificates/_.revisionaryapp.com.crt" ]] || [[ ! -f "$BASEDIR/proxy/certificates/_.revisionaryapp.com.key" ]];then

		printf "Creating the self-signed *.revisionaryapp.com certificates ..."
		docker_compose run --rm --no-deps proxy bash -c "
			openssl req -x509 -out /etc/ssl/private/_.revisionaryapp.com.crt -keyout /etc/ssl/private/_.revisionaryapp.com.key \
			-newkey rsa:2048 -nodes -sha256 \
			-subj '/CN=*.revisionaryapp.com' -extensions EXT -config <( \
			printf '[dn]\nCN=*.revisionaryapp.com\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:*.revisionaryapp.com\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth')
		"
		echo -e " ${GREEN}done${RESET}"

	else

		echo -e " ${BLUE}Cetificate already exists for 'revisionary.co'${RESET}"

	fi


	# Revisionary.co Certificates
	if [[ ! -f "$BASEDIR/proxy/certificates/_.revisionary.co.crt" ]] || [[ ! -f "$BASEDIR/proxy/certificates/_.revisionary.co.key" ]];then

		printf "Creating the self-signed *.revisionary.co certificates ..."
		docker_compose run --rm --no-deps proxy bash -c "
			openssl req -x509 -out /etc/ssl/private/_.revisionary.co.crt -keyout /etc/ssl/private/_.revisionary.co.key \
			-newkey rsa:2048 -nodes -sha256 \
			-subj '/CN=*.revisionary.co' -extensions EXT -config <( \
			printf '[dn]\nCN=*.revisionary.co\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:*.revisionary.co\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth')
		"
		echo -e " ${GREEN}done${RESET}"

	else

		echo -e " ${BLUE}Cetificate already exists for 'revisionaryapp.com'${RESET}"

	fi


elif [[ $ACTION == docker-compose ]];then


	set -- "${@:2}"
	docker_compose "$@"


else


	if [[ -z $ACTION ]];then
		echo -e "${BLUE}Available actions:${RESET} deploy | pull | rebuild | uninstall | update-images | reset-repos | reset-docker | reset-all | permission-fix | create-certificates | docker-compose"
	else
		echo -e "${BLUE}Skipped:${RESET} This action is not allowed on '$ENV_NAME' environment."
	fi

fi
