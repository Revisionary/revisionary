version: "3.8"

services:
    proxy:
        image: nginx:latest
        container_name: revisionary_proxy
        restart: "always"
        env_file:
            - ./.env
        ports:
            - 80:80
            - 443:443
        volumes:
            - ./proxy/templates/:/etc/nginx/templates/
            - ./proxy/common:/etc/nginx/common
            - ./proxy/certificates/:/etc/nginx/certificates/
            - ./proxy/logs:/var/log/nginx
        # networks:
        #     - proxy-network
        #     - backend-network

    backend:
        build:
            context: ./backend
            args:
                API_SUBDOMAIN: ${API_SUBDOMAIN:-dpi}
                API_INSECURE_SUBDOMAIN: ${API_INSECURE_SUBDOMAIN:-dpi}
                API_DOMAIN: ${API_DOMAIN:-revisionary.co}
        image: revisionary_backend:latest
        container_name: revisionary_backend
        restart: "always"
        env_file:
            - ./.env
        volumes:
            - ./backend/src/cache:/backend/cache
            - ./backend/logs:/var/log/nginx
            # - ./backend/src/app:/backend/app
            # - ./backend/src/assets:/backend/assets
            # - ./backend/src/index.php:/backend/index.php
        # networks:
        #     - backend-network

    memcached:
        image: memcached:latest
        container_name: revisionary_memcached
        restart: "always"
        command: ["-m", "512m"]
        # networks:
        #     - backend-network

    database:
        image: mysql:latest
        container_name: revisionary_database
        restart: "unless-stopped"
        command: [
            "--character-set-server=utf8mb4",
            "--collation-server=utf8mb4_unicode_ci",
            "--slow_query_log=ON", # Make this off when in production !!!
            "--long_query_time=2",
            "--slow_query_log_file=/var/lib/mysql/mysql/slow_queries.log",
        ]
        environment:
            MYSQL_DATABASE: ${DB_NAME}
            MYSQL_USER: ${DB_USER}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
        volumes:
            - ./backend/db/dump:/docker-entrypoint-initdb.d
            # - mysql:/var/lib/mysql
        # networks:
        #     - backend-network

    chrome:
        build: ./chrome
        # user: www-data
        image: revisionary_chrome:latest
        container_name: revisionary_chrome
        restart: "always"
        # ports:
        #     - 8080:3000
        volumes:
            - ./backend/src/cache:/chrome/cache
            # - ./chrome/src:/chrome/src
        # networks:
        #     - backend-network

    # landing:
    #     build:
    #         context: ./landing
    #         dockerfile: Dockerfile-production
    #     image: revisionary_landing:latest
    #     container_name: revisionary_landing
    #     restart: "always"
    #     volumes:
    #         - ./landing/src:/landing/src
    #     command: "npm run start"
    #     networks:
    #         - proxy-network
    #     environment:
    #         HOST: 0.0.0.0
    #         PORT: 3030

    # dashboard:
    #     build:
    #         context: ./dashboard
    #         dockerfile: Dockerfile-production
    #     image: revisionary_dashboard:latest
    #     container_name: revisionary_dashboard
    #     restart: "always"
    #     depends_on:
    #         - backend
    #     volumes:
    #         - ./dashboard/src:/dashboard/src
    #     command: "npm run start"
    #     networks:
    #         - backend-network
    #     environment:
    #         HOST: 0.0.0.0
    #         PORT: 3000
    #         API_ENDPOINT: https://${API_SUBDOMAIN}.${API_DOMAIN}/v1/

    # phpmyadmin:
    #     image: phpmyadmin/phpmyadmin:latest
    #     container_name: revisionary_phpmyadmin
    #     restart: "unless-stopped"
    #     ports:
    #         - ${LOCAL_IP}:8000:80
    #     volumes:
    #         - ./backend/config/phpmyadmin.ini:/usr/local/etc/php/conf.d/uploads.ini
    #     environment:
    #         PMA_HOSTS: ${DB_HOST}, ${DB_CLOUD_HOST}
    #         PMA_PORTS: ${DB_PORT}, ${DB_CLOUD_PORT}
    #         PMA_VERBOSES: Docker, Cloud
    #     networks:
    #         - backend-network

# networks:
#     proxy-network: {}
#     backend-network: {}

# volumes:
#     mysql: {}
