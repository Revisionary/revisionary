#!/bin/bash


ACTION=ask


# Predefined action
if [[ ! -z $1 ]]; then

	ACTION=$1

fi



# Create an .env file and start installation
if [[ ! -f .env ]]; then

	read -ep "Which environment are you installing on? (local | remote): " ENV
	if [[ $ENV == remote ]]; then

		cp .env.remote .env

	else

		cp .env.local .env

	fi

	ACTION=install

fi



# Get data from .env file
source .env


function docker_compose {

	if [[ $ENV_NAME == remote-dev ]]; then

		echo "Production Mode"
		docker-compose "$@"
	
	else

		echo "Development Mode"
		docker-compose -f "docker-compose-development.yml" "$@"

	fi

}



## CLONNING THE SERVICES
# Landing Page Repo
if [[ ! -d landing ]]; then

	echo "Landing clonning..."
	git clone https://github.com/Revisionary/revisionary-landing.git landing

fi

# Dashboard Page Repo
if [[ ! -d dashboard ]]; then

	echo "Dashboard clonning..."
	git clone https://github.com/Revisionary/revisionary-dashboard.git dashboard

fi

# Backend Repo
if [[ ! -d backend ]]; then

	echo "Backend clonning..."
	git clone https://github.com/Revisionary/revisionary-backend-nginx.git backend

fi

# Backend Sources Repo
if [[ ! -d backend/src ]]; then

	echo "Backend sources clonning..."
	git clone https://github.com/Revisionary/revisionary-backend-src.git backend/src

fi

# Database Repo
if [[ ! -d database ]]; then

	echo "Database clonning..."
	git clone https://github.com/Revisionary/revisionary-database.git database

fi

# Chrome Repo
if [[ ! -d chrome ]]; then

	echo "Chrome clonning..."
	git clone https://github.com/Revisionary/revisionary-chrome.git chrome

fi



# Ask the action
if [[ $ACTION == ask ]]; then

	read -ep "Which do you want to do? (install | pull | recreate | rebuild | down | update | remove-logs | reset | prune | reset-all): " ACTION

fi



if [[ $ACTION == install ]]; then


	echo "Building the project..."
	docker_compose up -d --build
	echo "Project built."


	echo "Updating file permissions in server..."
	docker_compose exec backend chown -R www-data:www-data /backend
	docker_compose exec backend find /backend -type f -exec chmod 644 {} \;
	docker_compose exec backend find /backend -type d -exec chmod 755 {} \;
	echo "File permissions updated in server"


	# echo "Checking MySQL to be ready..."
	# while ! docker_compose exec database mysqladmin --user=${DB_USER} --password=${DB_ROOT_PASSWORD} --host "${LOCAL_IP}" ping --silent &> /dev/null ; do
	# 	echo "Waiting for database connection..."
	# 	sleep 3
	# done
	# echo "Site is ready!"


elif [[ $ACTION == pull ]]; then


	echo "Main Project:"
	git pull

	echo "Landing:"
	( cd landing && git pull )

	echo "Dashboard:"
	( cd dashboard && git pull )

	echo "Backend:"
	( cd backend && git pull )

	echo "Backend Source:"
	( cd backend/src && git pull )

	echo "Database:"
	( cd database && git pull )

	echo "Chrome:"
	( cd chrome && git pull )


elif [[ $ACTION == recreate ]]; then


	echo "Recreating the containers..."
	docker_compose up -d --force-recreate
	echo "Containers recreated."


	# echo "Updating file permissions in server..."
	# docker_compose exec backend chown -R www-data:www-data /backend
	# docker_compose exec backend find /backend -type f -exec chmod 644 {} \;
	# docker_compose exec backend find /backend -type d -exec chmod 755 {} \;
	# echo "File permissions updated in server"


	# echo "Checking MySQL to be ready..."
	# while ! docker_compose exec database mysqladmin --user=${DB_USER} --password=${DB_ROOT_PASSWORD} --host "${LOCAL_IP}" ping --silent &> /dev/null ; do
	# 	echo "Waiting for database connection..."
	# 	sleep 3
	# done
	# echo "Site is ready!"


elif [[ $ACTION == rebuild ]]; then


	echo "Rebuilding the project..."
	docker_compose up -d --build --force-recreate
	echo "Project rebuilt."


	echo "Updating file permissions in server..."
	docker_compose exec backend chown -R www-data:www-data /backend
	docker_compose exec backend find /backend -type f -exec chmod 644 {} \;
	docker_compose exec backend find /backend -type d -exec chmod 755 {} \;
	echo "File permissions updated in server"


	# echo "Checking MySQL to be ready..."
	# while ! docker_compose exec database mysqladmin --user=${DB_USER} --password=${DB_ROOT_PASSWORD} --host "${LOCAL_IP}" ping --silent &> /dev/null ; do
	# 	echo "Waiting for database connection..."
	# 	sleep 3
	# done
	# echo "Site is ready!"


elif [[ $ACTION == down ]]; then

	
	read -ep "This action will stop the server. Are you sure you want to continue? (yes | no): " confirmation
	[[ $confirmation != "yes" ]] && exit || sleep 0


	echo "Closing the server..."
	docker_compose down
	echo "Server became down."


elif [[ $ACTION == update ]]; then


	read -ep "This action will stop the server for a moment. Are you sure you want to continue? (yes | no): " confirmation
	[[ $confirmation != "yes" ]] && exit || sleep 0



	echo "Updating the server..."
	docker_compose stop
	docker_compose rm -f
	docker_compose pull
	docker_compose up -d --build --force-recreate
	echo "Server up-to-date."


	echo "Updating file permissions in server..."
	docker_compose exec backend chown -R www-data:www-data /backend
	docker_compose exec backend find /backend -type f -exec chmod 644 {} \;
	docker_compose exec backend find /backend -type d -exec chmod 755 {} \;
	echo "File permissions updated in server"


	# echo "Checking MySQL to be ready..."
	# while ! docker_compose exec database mysqladmin --user=${DB_USER} --password=${DB_ROOT_PASSWORD} --host "${LOCAL_IP}" ping --silent &> /dev/null ; do
	# 	echo "Waiting for database connection..."
	# 	sleep 3
	# done
	# echo "Site is ready!"


elif [[ $ACTION == remove-logs ]]; then


	read -ep "This action will completely reset the logs. Are you sure you want to continue? (yes | no): " confirmation
	[[ $confirmation != "yes" ]] && exit || sleep 0


	echo "Removing the logs..."
	sh helpers/clean-logs.sh
	echo "Logs are removed."


	echo "Restarting the server..."
	docker_compose up -d --force-recreate
	echo "Server has been restarted."


elif [[ $ACTION == reset ]]; then


	read -ep "This action will completely reset the files/logs. And, will stop the server. Are you sure you want to continue? (yes | no): " confirmation
	[[ $confirmation != "yes" ]] && exit || sleep 0


	echo "Closing the server..."
	docker_compose down
	echo "Server became down."


	echo "Cleaning files..."
	sh helpers/clean-logs.sh
	sh helpers/clean-files.sh
	echo "All the project reset."


elif [[ $ACTION == prune ]]; then


	read -ep "This action will completely reset the Docker. And, will stop the server. Are you sure you want to continue? (yes | no): " confirmation
	[[ $confirmation != "yes" ]] && exit || sleep 0


	echo "Closing the server..."
	docker_compose down
	echo "Server became down."


	echo "Pruning the docker..."
	sh helpers/clean-docker.sh
	echo "Docker reset."


elif [[ $ACTION == reset-all ]]; then


	read -ep "This action will completely reset the Docker, files and logs. And, will stop the server. Are you sure you want to continue? (yes | no): " confirmation
	[[ $confirmation != "yes" ]] && exit || sleep 0


	echo "Closing the server..."
	docker_compose down
	echo "Server became down."


	echo "Resetting all..."
	sh helpers/clean-logs.sh
	sh helpers/clean-files.sh
	sh helpers/clean-docker.sh
	echo "All the project and Docker reset."


fi
